
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<div id="app">
    <!-- Page Title-->
    <div class="page-title">
        <div class="container">
            <div class="column">
                <h1>
                    
                </h1>
            </div>
            <div class="column">
                <ul class="breadcrumbs">
                    <li>
                        <a href="/">Home</a>
                    </li>
                    <li class="separator">&nbsp;</li>
                    <li>Recherche</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- Page Content-->
    <div class="container padding-bottom-3x mb-1">
        <div class="row">
            <!-- Products-->
            <div class="col-lg-9 order-lg-2">
                <!-- Shop Toolbar-->
                <div class="shop-toolbar padding-bottom-1x mb-2">
                    <div class="column">
                        <div class="shop-sorting">
                            <label for="sorting">Sort by:</label>
                            <select class="form-control" id="sorting" v-on:change="changeSort($event)">
                                <option value="popularity" :selected="sort === 'popularity'">Popularity</option>
                                <option value="low_price" :selected="sort === 'low_price'">Low - High Price</option>
                                <option value="high_price" :selected="sort === 'high_price'">High - Low Price</option>
                                <option value="rating" :selected="sort === 'rating'">Average Rating</option>
                                <option value="a-z" :selected="sort === 'a-z'">A - Z Order</option>
                                <option value="z-a" :selected="sort === 'z-a'">Z - A Order</option>
                            </select><span class="text-muted">Showing:&nbsp;</span><span>{{ itemIndexStart }} - {{ itemIndexEnd }} items</span>
                        </div>
                    </div>
                    <div class="column">
                        <div class="shop-view">
                            <a class="grid-view" v-bind:class="[ viewMode == 'grid' ? 'active' : '' ]" v-on:click="showGrid()"><span></span><span></span><span></span></a>
                            <a class="list-view" v-bind:class="[ viewMode == 'list' ? 'active' : '' ]" v-on:click="showList()"><span></span><span></span><span></span></a>
                        </div>
                    </div>
                </div>
                <!-- Products Grid-->
                <div class="row">
                    <template v-if="viewMode == 'grid'">
                        <div class="col-md-4 col-sm-6" v-for="item in items">
                            <div class="product-card mb-30">
                                <a class="product-thumb" :href="'/Item/' + item.linkName"><img v-bind:src="'/img/items/' + item.linkName + '_0.jpg'" alt="Product"></a>
                                <div class="product-card-body">
                                    <h3 class="product-title"><a href="/Item/?LinkName">{{ item.name }}</a></h3>
                                    <h4 class="product-price">
                                        {{ item.currentPrice }} €
                                    </h4>
                                </div>
                            </div>
                        </div>
                    </template>
                    <template v-else>
                        <div class="product-card product-list mb-30" v-for="item in items">
                            <a class="product-thumb" :href="'/Item/' + item.linkName">
                                <img v-bind:src="'/img/items/' + item.linkName + '_0.jpg'" alt="Product">
                            </a>
                            <div class="product-card-inner">
                                <div class="product-card-body">
                                    <h3 class="product-title"><a :href="'/Item/' + item.linkName">{{ item.name }}</a></h3>
                                    <h4 class="product-price">
                                        {{ item.currentPrice }} €
                                    </h4>
                                    <p class="text-sm text-muted hidden-xs-down my-1">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tempore odit officiis illo perferendis deserunt, ipsam dolor ad dolorem eaque veritatis.</p>
                                </div>
                                <div class="product-button-group"><a class="product-button btn-wishlist" href="#"><i class="icon-heart"></i><span>Wishlist</span></a><a class="product-button btn-compare" href="#"><i class="icon-repeat"></i><span>Compare</span></a><a class="product-button" href="#" data-toast="" data-toast-type="success" data-toast-position="topRight" data-toast-icon="icon-check-circle" data-toast-title="Product" data-toast-message="successfuly added to cart!"><i class="icon-shopping-cart"></i><span>To Cart</span></a></div>
                            </div>
                        </div>
                    </template>
                </div>
                <!-- Pagination-->
                <nav class="pagination">
                    <div class="column">
                        <ul class="pages">
                            <li v-for="i in this.pageCount" v-bind:class="[ i === page + 1 ? 'active' : '' ]" ><a v-on:click="changePage(i)">{{ i }}</a></li>
                        </ul>
                    </div>
                    <div v-if="page < pageCount - 1" class="column text-right hidden-xs-down"><a class="btn btn-outline-secondary btn-sm" v-on:click="incrementPage()">Next&nbsp;<i class="icon-chevron-right"></i></a></div>
                </nav>
            </div>
            <!-- Sidebar-->
            <div class="col-lg-3 order-lg-1">
                <div class="sidebar-toggle position-left"><i class="icon-filter"></i></div>
                <aside class="sidebar sidebar-offcanvas position-left">
                    <span class="sidebar-close"><i class="icon-x"></i></span>
                    <!-- Widget Categories-->
                    @*
        <section class="widget widget-categories">
            <h3 class="widget-title">Shop Categories</h3>
            <ul>
                @foreach (var category in Model.Categories)
                {
                    <li class="has-children expanded">
                        <a href="/search?c=@category.Category.LinkName">@category.Category.Name</a><span>(@category.Category.ItemsCount)</span>
                        @if (category.Children != null && category.Children.Count() > 0)
                        {
                            <ul>
                                @foreach (var child in category.Children)
                                {
                                    <li><a href="/search?c=@child.Category.LinkName">@child.Category.Name</a></li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        </section>
                        *@

                <!-- Widget Price Range-->
                <section class="widget widget-categories">
                    <h3 class="widget-title">Price Range</h3>
                    <div class="price-range-slider" v-on:click="priceRangeSliderCkicked">
                        <div class="ui-range-slider noUi-target noUi-ltr noUi-horizontal noUi-background">
                            <div class="noUi-base">
                                <div class="noUi-origin noUi-connect" v-bind:style="{ left: priceRangeSliderPosition1 + '%' }">
                                    <div class="noUi-handle noUi-handle-lower">
                                    </div>
                                </div>
                                <div class="noUi-origin noUi-background" v-bind:style="{ left: priceRangeSliderPosition2 + '%' }">
                                    <div class="noUi-handle noUi-handle-upper">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            

                    <!-- Widget Brand Filter-->
                    <section class="widget">
                        <h3 class="widget-title">Filter by Brand</h3>
                        <div class="custom-control custom-checkbox" v-for="brand in brands" v-on:click="brandClicked(brand)">
                            <input class="custom-control-input" type="checkbox" :checked="brand.selected">
                            <label class="custom-control-label" for="apple">{{ brand.brand.name }} &nbsp;<span class="text-muted">20</span></label>
                        </div>
                    </section>
                </aside>
            </div>
        </div>
    </div>
</div>
<script>
    new Vue({
        el: '#app',
        data: {
            items: [],
            page: 0,
            pageCount: 0,
            sort: 'a-z',
            minPrice: 0,
            priceMin:0,
            priceMax: 0,
            filterPriceMin: 0,
            filterPriceMax: 0,
            brands:[],
            priceRangeSliderPosition1: 0,
            priceRangeSliderPosition2: 100,
            viewMode: 'grid',
            itemIndexStart: 0,
            itemIndexEnd: 0,
        },
        mounted() {
            this.loadItems();
        },
        methods: {
            changeSort: function (event) {
                this.sort = event.target.value;
                this.loadItems();
            },
            changePage: function (index) {
                this.page = index - 1;
                this.loadItems();
            },
            incrementPage: function (index) {
                this.page++;
                this.loadItems();
            },
            priceRangeSliderCkicked: function (event) {
                let ratio = event.offsetX / event.currentTarget.clientWidth;
                ratio = ratio < 0.90 ? ratio : 1;
                this.priceRangeSliderPosition2 = ratio * 100;
                this.filterPriceMax = this.priceMin + (ratio * (this.priceMax - this.priceMin));
                this.page = 0;
                this.loadItems();
            },
            brandClicked: function (brand) {
                brand.selected = !brand.selected;
                this.page = 0;
                this.loadItems();
            },
            loadItems: function () {
                let uri = window.location.search.substring(1);
                let params = new URLSearchParams(uri);
                let keywords = params.get("keywords");

                axios
                    .get('/api/search?' + 
                    'Keywords=' + keywords + '&' +
                    'Page=' + this.page + '&' +
                    'Sort=' + this.sort + '&' +
                    'FilterPriceMin=' + this.filterPriceMin + '&' +
                    'FilterPriceMax=' + this.filterPriceMax + '&' +
                    'Brands=' + this.generateBrandsParameter())

                        .then(response => {
                            this.items = response.data.items;
                            this.pageCount = response.data.pageCount;
                            this.priceMin = response.data.priceMin;
                            this.priceMax = response.data.priceMax;
                            this.brands = response.data.brands;

                            if (this.filterPriceMin < this.priceMin || this.filterPriceMin > this.priceMax) {
                                this.filterPriceMin = this.priceMin;
                                this.priceRangeSliderPosition1 = 0;
                            }
                                

                            if (this.filterPriceMax > this.priceMax || this.filterPriceMax < this.priceMin) {
                                this.filterPriceMax = this.priceMax;
                                this.priceRangeSliderPosition2 = 100;
                            }

                            this.itemIndexStart = (this.page * response.data.itemsPerPage) + 1;
                            this.itemIndexEnd = (this.itemIndexStart + this.items.length) - 1;
                        })
            },
            generateBrandsParameter: function () {
                let result = '';
                this.brands.forEach(brand => {
                    if (brand.selected) {
                        if (result == '') {
                            result = brand.brand.linkName;
                        } else {
                            result = result.concat('%2C', brand.brand.linkName);
                        }
                    }
                });
                return result;
            },
            showGrid: function () {
                this.viewMode = 'grid'
            },
            showList: function () {
                this.viewMode = 'list'
            }
        }
    })
</script>